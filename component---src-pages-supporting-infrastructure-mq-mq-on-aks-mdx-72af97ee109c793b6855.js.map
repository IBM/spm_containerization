{"version":3,"file":"component---src-pages-supporting-infrastructure-mq-mq-on-aks-mdx-72af97ee109c793b6855.js","mappings":"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","sources":["webpack://spm-kubernetes/./src/pages/supporting-infrastructure/mq/mq-on-aks.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/spm-kubernetes/spm-kubernetes/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Merative Social Program Management (SPM) supports only `}<strong parentName=\"p\">{`IBM MQ LTS on a VM`}</strong>{` , when running on AKS. The following steps outline how to do this. In this runbook we will outline the steps to create:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-queues\"\n        }}>{`Queues`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-listeners\"\n        }}>{`Listeners`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-channels\"\n        }}>{`Channels`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-topic-objects\"\n        }}>{`Topics`}</a></li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` The MQ version for this runbook verification is  9.1.0 LTS.`}</p>\n    </InlineNotification>\n    <p>{`For the runbook, two standalone VMs were used as MQ nodes.`}</p>\n    <h3>{`Queue manager names`}</h3>\n    <p>{`For runbook configuration, the following naming conversion was used throughout the MQ setup: `}<inlineCode parentName=\"p\">{`NamingConvention_AppName`}</inlineCode>{`. This must be unique, but ensure you change the commands used on this page accordingly.`}</p>\n    <p><strong parentName=\"p\">{`Queue Name:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`minikube_curam`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Channel Name:`}</strong>{` This value should be all capitals`}</p>\n    <p><inlineCode parentName=\"p\">{`CHL_NamingConvention_AppName`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\">{`CHL_MINIKUBE_CURAM`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Listeners Name:`}</strong>{` This value should be all capitals`}</p>\n    <p><inlineCode parentName=\"p\">{`LS_NamingConvention_AppName`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\">{`LS_MINIKUBE_CURAM`}</li>\n    </ul>\n    <h2>{`MQ stages`}</h2>\n    <p>{`On both MQ nodes run the following command as root:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`su - mqm # Changing user into mqm\nexport PATH=/opt/mqm/inst1/bin:$PATH\n`}</code></pre>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Important!`}</strong></p>\n      <p>{`Run the export PATH command on both MQ nodes, this command will be used in further commands in the runbook.`}</p>\n    </InlineNotification>\n    <h2>{`Shared storage`}</h2>\n    <p>{`Create the shared storage for our nodes.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` Run the commands as root.`}</p>\n    </InlineNotification>\n    <p>{`On the shared node run the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mkdir -p /MQHA/logs\nmkdir -p /MQHA/qmgrs\nmkdir -p /MQHA/scratch\nuseradd mqha -s /sbin/nologin\nchown -R mqha:mqha /MQHA/*\n`}</code></pre>\n    <p>{`Verify that the UID and GUID match the owner ID by running the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`echo \"/MQHA  MQ.FQDN(rw,sync,no_wdelay,fsid=0,anonuid=1001,anongid=1001)\" >> /etc/exports\n`}</code></pre>\n    <p>{`Start and enable both the nfs service and rpcbind service by running the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`systemctl start nfs-server.service\nsystemctl enable nfs-server.service\nsystemctl start rpcbind\nsystemctl enable rpcbind\n`}</code></pre>\n    <p>{`On MQ nodes run the following commands:`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` Commands to be run as root.`}</p>\n    </InlineNotification>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`echo \"SHAREDNODEADDRESS:/MQHA  /MQHA  nfs  defaults  0 0\" >> /etc/fstab\nsystemctl start rpcbind\nsystemctl enable rpcbind\nmkdir -p /MQHA\nchmod 1777 /MQHA #Check permissions\nmount /MQHA\n`}</code></pre>\n    <h2>{`Create QMs`}</h2>\n    <p>{`When creating the queue, start on the secondary node first then move to the primary node.`}</p>\n    <p>{`On the secondary MQ node, run the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crtmqm -ld /MQHA/logs -md /MQHA/qmgrs minikube_curam\ndspmqinf -o command minikube_curam\n`}</code></pre>\n    <p>{`Save the output of the `}<inlineCode parentName=\"p\">{`dspmqinf -o command minikube_curam`}</inlineCode>{` command, it should look like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`addmqinf -s QueueManager -v Name=minikube_curam -v Directory=minikube_curam -v Prefix=/var/mqm -v DataPath=/MQHA/qmgrs/minikube_curam\n`}</code></pre>\n    <p>{`Wait for /MQHA/qmgrs/minikube_curam/qm.ini to appear on other node`}</p>\n    <p>{`On the primary MQ node run the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`addmqinf -s QueueManager -v Name=minikube_curam -v Directory=minikube_curam -v Prefix=/var/mqm -v DataPath=/MQHA/qmgrs/minikube_curam\nstrmqm -x minikube_curam\n`}</code></pre>\n    <p>{`On the secondary MQ node run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`strmqm -x minikube_curam\n`}</code></pre>\n    <h2>{`Create queues`}</h2>\n    <p>{`On the primary MQ node run the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`runmqsc minikube_curam <<-EOS\nDEFINE QLOCAL(QN.CURAMDEADMESSAGEQUEUE) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.WORKFLOWERROR) BOTHRESH(5) BOQNAME(QN.CURAMDEADMESSAGEQUEUE) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.WORKFLOWENACTMENT) BOTHRESH(5) BOQNAME(QN.WORKFLOWERROR) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.WORKFLOWACTIVITY) BOTHRESH(5) BOQNAME(QN.WORKFLOWERROR) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.DPERROR) BOTHRESH(5) BOQNAME(QN.CURAMDEADMESSAGEQUEUE) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.DPENACTMENT) BOTHRESH(5) BOQNAME(QN.DPERROR) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nALTER QMGR CHLAUTH(DISABLED)\nALTER QMGR DEADQ(QN.CURAMDEADMESSAGEQUEUE)\nEOS\n`}</code></pre>\n    <h2>{`Create listeners`}</h2>\n    <p>{`On the primary MQ node run the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`runmqsc minikube_curam <<-EOS\nDEFINE LISTENER (LS_MINIKUBE_CURAM) TRPTYPE (TCP) CONTROL (QMGR) PORT (1414)\nSTART LISTENER (LS_MINIKUBE_CURAM)\nEOS\n`}</code></pre>\n    <h2>{`Create channels`}</h2>\n    <p>{`On the primary MQ node run the following command:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Enter your MQ node names into the following commands:`}</li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` CERTLABL expects the value to be lower case ibmwebspheremq + Queue Name\nFor this example it will be ibmwebspheremqminikube_curam`}</p>\n    </InlineNotification>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`runmqsc minikube_curam <<-EOS\nDEFINE CHANNEL(CHL_MINIKUBE_CURAM) CHLTYPE(SVRCONN)  TRPTYPE(TCP) MCAUSER('mqm') SSLCIPH (TLS_RSA_WITH_AES_128_CBC_SHA256)  CERTLABL ('ibmwebspheremqminikube_curam') SSLCAUTH (OPTIONAL) REPLACE\nDEFINE CHANNEL(CHL_MINIKUBE_CURAM) CHLTYPE(CLNTCONN) TRPTYPE(TCP) CONNAME('Node1(1414),Node2(1414)') QMNAME(minikube_curam) SSLCIPH (TLS_RSA_WITH_AES_128_CBC_SHA256) CERTLABL ('ibmwebspheremqminikube_curam') REPLACE\nEOS\n`}</code></pre>\n    <h2>{`Create topics`}</h2>\n    <p>{`On the primary MQ node run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`runmqsc minikube_curam <<-EOS\nDEFINE TOPIC (CURAMCACHEINVALIDATIONTOPIC) TOPICSTR (CURAMCACHEINVALIDATIONTOPIC)\nALTER QMGR CONNAUTH('CHECK.PWD')\nDEFINE AUTHINFO('CHECK.PWD') AUTHTYPE(IDPWOS) CHCKLOCL(OPTIONAL) CHCKCLNT(OPTIONAL)\nEOS\n`}</code></pre>\n    <h2>{`Configure security`}</h2>\n    <p>{`The configuration of security is in four parts`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Setting the object type.`}</li>\n      <li parentName=\"ul\">{`Creating the keystore and certs.`}</li>\n      <li parentName=\"ul\">{`Updating the certs on both nodes.`}</li>\n      <li parentName=\"ul\">{`Refreshing security settings.`}</li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong></p>\n      <p>{`The application pods must connect to MQ using a non-privileged account. The example commands use `}<inlineCode parentName=\"p\">{`mqclient`}</inlineCode>{` as the non-privileged account.\nThis username must be set in the secret referenced by the `}<inlineCode parentName=\"p\">{`global.mq.queueManager.secret.name`}</inlineCode>{` property. See the `}<a parentName=\"p\" {...{\n          \"href\": \"/spm-kubernetes/deployment/secrets\"\n        }}>{`Handling Secrets`}</a>{` page for more information.`}</p>\n    </InlineNotification>\n    <p>{`On the secondary MQ node run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`useradd -g 0 -M mqclient && usermod -L mqclient\n`}</code></pre>\n    <p>{`On the primary MQ node run the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`useradd -g 0 -M mqclient && usermod -L mqclient\nrunmqsc minikube_curam <<-EOS\nSET AUTHREC OBJTYPE(QMGR) PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.DPENACTMENT') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.DPERROR') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.WORKFLOWACTIVITY') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.WORKFLOWENACTMENT') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.WORKFLOWERROR') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.CURAMDEADMESSAGEQUEUE') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(LISTENER) PROFILE('LS_MINIKUBE_CURAM') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(CHANNEL) PROFILE('CHL_MINIKUBE_CURAM') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(CLNTCONN) PROFILE('CHL_MINIKUBE_CURAM') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(TOPIC) PROFILE('CURAMCACHEINVALIDATIONTOPIC') PRINCIPAL('mqclient') AUTHADD(ALL)\nEOS\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`runmqckm -keydb -create -db /MQHA/qmgrs/minikube_curam/ssl/key.kdb -type cms -pw Passw0rd -stash\nrunmqakm -cert -create -db /MQHA/qmgrs/minikube_curam/ssl/key.kdb -stashed -label ibmwebspheremqminikube_curam -size 2048 -dn \"CN=minikube_curam,O=IBM,C=US\" -x509version 3 -expire 365 -sig_alg SHA256WithRSA\nrunmqakm -cert -extract -db /MQHA/qmgrs/minikube_curam/ssl/key.kdb -stashed -label ibmwebspheremqminikube_curam -target /MQHA/qmgrs/minikube_curam/ssl/key_minikube_curam.arm\nrunmqakm -cert -export -db /MQHA/qmgrs/minikube_curam/ssl/key.kdb -stashed -label ibmwebspheremqminikube_curam -target /MQHA/qmgrs/minikube_curam/ssl/key_minikube_curam.p12 -target_type pkcs12 -target_pw Passw0rd\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`openssl pkcs12 -in /MQHA/qmgrs/minikube_curam/ssl/key_minikube_curam.p12 -passin pass:Passw0rd -nocerts -nodes | sed -ne '/-BEGIN PRIVATE KEY-/,/-END PRIVATE KEY-/p' > /MQHA/qmgrs/minikube_curam/ssl/tls.key\nopenssl pkcs12 -in /MQHA/qmgrs/minikube_curam/ssl/key_minikube_curam.p12 -passin pass:Passw0rd -clcerts -nokeys | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /MQHA/qmgrs/minikube_curam/ssl/tls.crt\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`runmqsc minikube_curam <<-EOS\nALTER QMGR CONNAUTH('CHECK.PWD')\nDEFINE AUTHINFO('CHECK.PWD') AUTHTYPE(IDPWOS) CHCKLOCL(OPTIONAL) CHCKCLNT(OPTIONAL)\nREFRESH SECURITY TYPE(SSL)\nREFRESH SECURITY TYPE(AUTHSERV)\nREFRESH SECURITY TYPE(CONNAUTH)\nEOS\n`}</code></pre>\n    <p>{`After these stages have been run MQ should be configured.`}</p>\n    <h2>{`Clean up QMs/channels/listeners`}</h2>\n    <p>{`Used these steps if you are reconfiguring MQ or cleaning up MQ.`}</p>\n    <p>{`On both MQ nodes run the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`endmqm -w minikube_curam\ndltmqm minikube_curam\nrmvmqinf minikube_curam\n`}</code></pre>\n    <p>{`On either MQ node run the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`rm -rf /MQHA/qmgrs/**\nrm -rf /MQHA/logs/**\nrm -rf /MQHA/scratch\nendmqm -w minikube_curam\ndltmqm minikube_curam\nrmvmqinf minikube_curam\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineNotification","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","Object","assign","mdxType","parentName","kind","isMDXComponent"],"sourceRoot":""}