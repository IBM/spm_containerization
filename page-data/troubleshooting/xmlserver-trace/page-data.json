{"componentChunkName":"component---src-pages-troubleshooting-xmlserver-trace-mdx","path":"/troubleshooting/xmlserver-trace/","result":{"pageContext":{"frontmatter":{"title":"XML server tracing","description":"Configuring XML server tracing"},"relativePagePath":"/troubleshooting/xmlserver-trace.mdx","titleType":"page","MdxNode":{"id":"02fbe384-93c3-5bc6-843e-2c19dc7f52ac","children":[],"parent":"68a4129a-ebad-568c-bb9f-b8f17aabc7c0","internal":{"content":"---\ntitle: XML server tracing\ndescription: Configuring XML server tracing\n---\n## Introduction\n\nThis topic describes how to configure XML server tracing when deployed to Kubernetes.\n\nFor more information about XML server tracing, see **Debug configuration** in the *Social Program Management XML Infrastructure Guide*.\n\n<InlineNotification>\n\nThe Social Program Management PDF documentation is available to download from [Merative Support Docs](https://curam-spm-devops.github.io/wh-support-docs/spm/pdf-documentation/).\n\n</InlineNotification>\n\nHowever, to use it in a Kubernetes environment you will need to perform the steps described in this section.\n\nIn summary, you will need to:\n\n1. Create a new ConfigMap to override the trace setting in the default `xmlserverconfig.xml.template` file\n1. Optionally you can (for the `xmlserver` deployment only) create a ConfigMap to override its default log4j properties file.\n\nThe Kubernetes commands presented in this topic are generic and assume a helm release name of `releasename`.\nTo enter the commands in this topic as-is you need to enter the following commands first, substituting `<name_space>` for the OpenShift project name or AKS namespace for your deployment:\n\n* For Openshift:\n  * Create an alias for the `oc` command:\n    * Bash: `alias k='oc'`\n    * Windows PowerShell: `Set-Alias -Name k -Value oc`\n  * Set the default namespace:\n    `k project <name_space>`\n* For AKS:\n  * Create an alias for the `kubectl` command:\n    * Bash: `alias k='kubectl'`\n    * Windows PowerShell: `Set-Alias -Name k -Value kubectl`\n  * Set the default namespace:\n    `k config set-context --current --namespace=<name_space>`\n\n### Specifying the XML server trace setting\n\nTo enable XML server tracing you need to modify the out-of-the-box setting:\n\n* Copy the `xmlserver` pod's `xmlserverconfig.xml.template` file to your local file system using the Kubernetes copy command.  For example:\n  `k cp <xmlserver-pod-name>:xmlserverconfig.xml.template xmlserverconfig.xml.template -c xmlserver`\n* Edit the local `xmlserverconfig.xml.template` file to change the `TRACE_TRAFFIC` value as follows:\n  `<TRACE_TRAFFIC>true</TRACE_TRAFFIC>`\n* Delete the existing `releasename-xmlserverconfig-template-cm` ConfigMap. For example:\n  `k delete configmap releasename-xmlserverconfig-template-cm`\n* Create a new `releasename-xmlserverconfig-template-cm` ConfigMap using your edited copy of `xmlserverconfig.xml.template`; for example:\n  `k create releasename-xmlserverconfig-template-cm --from-file=xmlserverconfig.xml.template`\n  The existing `releasename-xmlserverconfig-template-cm` ConfigMap in the `releasename-xmlserver` deployment will be replaced with your newly edited file.\n* You must restart the xmlserver pod(s) for the new setting to be used. You can restart the pod(s) using the Kubernetes `delete pod` command.  For example:\n  `k delete pod <xmlserver-pod-name>`\n  This will terminate the running pod and start a new pod that reflects the new ConfigMap.\n\n### Modifying the log4j properties\n\nThe out-of-the-box `log4j2.properties` file will write the XML server trace output to stdout, which is routed to the pod's `tmp/xmlserver.log` file.\nOptionally, you can provide your own custom log4j properties file.\nFor instance, it can be useful to modify the output layout to indicate the time-of-day and the worker thread processing the XML server job.\nFor example this log4j pattern:\n\n```\nappender.A1.layout.pattern=[%p] %d{ABSOLUTE_MICROS} [%t] [%c{1}] %m%n\n```\n\nwill produce output in this format:\n\n```\n[xmlserver] [INFO] 14:01:46,165000 [ThreadPoolWorker-1] [XMLConnectionHandler] - Awaiting job configuration.\n```\n\nas compared to the out-of-the-box format:\n\n```\n[xmlserver] [INFO] [XMLConnectionHandler] Awaiting job configuration.\n```\n\nFor more information on specifying log4j patterns see the [Layouts section](https://logging.apache.org/log4j/2.x/manual/layouts.html) of the [log4j documentation](https://logging.apache.org/log4j/2.x/manual/index.html).\n\nTo modify the `log4j2.properties` file:\n\n* Copy the `xmlserver` pod's `log4j2.properties` file to your local file system using the Kubernetes copy command.  For example:\n  `k cp <xmlserver-pod-name>:/opt/ibm/Curam/xmlserver/log4j2.properties log4j2.properties -c xmlserver`\n* Edit the local file to specify the desired log4j configuration settings.\n* Create a ConfigMap using your edited copy of `log4j2.properties`; for example:\n  `k create configmap xmlserver-log4j-props-cm --from-file=log4j2.properties`\n* Edit the xmlserver deployment to specify the new ConfigMap:\n  `k edit deployment releasename-xmlserver`\n  * In the subsequent edit session add the entries for the new ConfigMap, matching the name used when creating it; for example:\n\n```\n...\n        volumeMounts:\n        ...\n        - mountPath: /opt/ibm/Curam/xmlserver/log4j2.properties\n          name: xmlserver-log4j-props-cm\n          subPath: log4j2.properties\n...\n      volumes:\n      ...\n      - configMap:\n          defaultMode: 420\n          name: xmlserver-log4j-props-cm\n        name: xmlserver-log4j-props-cm\n```\t\t\n\n* You must restart the xmlserver pod(s) for it to reflect the new trace setting. You can restart the pod by using the Kubernetes `delete pod` command.  For example:\n  `k delete pod <xmlserver-pod-name>`\n  This will terminate the running pod and start a new pod that reflects the new ConfigMap that contains the log4j properties.\n","type":"Mdx","contentDigest":"8fe38c4a6d02efa0e9b4575147e76b7f","owner":"gatsby-plugin-mdx","counter":196},"frontmatter":{"title":"XML server tracing","description":"Configuring XML server tracing"},"exports":{},"rawBody":"---\ntitle: XML server tracing\ndescription: Configuring XML server tracing\n---\n## Introduction\n\nThis topic describes how to configure XML server tracing when deployed to Kubernetes.\n\nFor more information about XML server tracing, see **Debug configuration** in the *Social Program Management XML Infrastructure Guide*.\n\n<InlineNotification>\n\nThe Social Program Management PDF documentation is available to download from [Merative Support Docs](https://curam-spm-devops.github.io/wh-support-docs/spm/pdf-documentation/).\n\n</InlineNotification>\n\nHowever, to use it in a Kubernetes environment you will need to perform the steps described in this section.\n\nIn summary, you will need to:\n\n1. Create a new ConfigMap to override the trace setting in the default `xmlserverconfig.xml.template` file\n1. Optionally you can (for the `xmlserver` deployment only) create a ConfigMap to override its default log4j properties file.\n\nThe Kubernetes commands presented in this topic are generic and assume a helm release name of `releasename`.\nTo enter the commands in this topic as-is you need to enter the following commands first, substituting `<name_space>` for the OpenShift project name or AKS namespace for your deployment:\n\n* For Openshift:\n  * Create an alias for the `oc` command:\n    * Bash: `alias k='oc'`\n    * Windows PowerShell: `Set-Alias -Name k -Value oc`\n  * Set the default namespace:\n    `k project <name_space>`\n* For AKS:\n  * Create an alias for the `kubectl` command:\n    * Bash: `alias k='kubectl'`\n    * Windows PowerShell: `Set-Alias -Name k -Value kubectl`\n  * Set the default namespace:\n    `k config set-context --current --namespace=<name_space>`\n\n### Specifying the XML server trace setting\n\nTo enable XML server tracing you need to modify the out-of-the-box setting:\n\n* Copy the `xmlserver` pod's `xmlserverconfig.xml.template` file to your local file system using the Kubernetes copy command.  For example:\n  `k cp <xmlserver-pod-name>:xmlserverconfig.xml.template xmlserverconfig.xml.template -c xmlserver`\n* Edit the local `xmlserverconfig.xml.template` file to change the `TRACE_TRAFFIC` value as follows:\n  `<TRACE_TRAFFIC>true</TRACE_TRAFFIC>`\n* Delete the existing `releasename-xmlserverconfig-template-cm` ConfigMap. For example:\n  `k delete configmap releasename-xmlserverconfig-template-cm`\n* Create a new `releasename-xmlserverconfig-template-cm` ConfigMap using your edited copy of `xmlserverconfig.xml.template`; for example:\n  `k create releasename-xmlserverconfig-template-cm --from-file=xmlserverconfig.xml.template`\n  The existing `releasename-xmlserverconfig-template-cm` ConfigMap in the `releasename-xmlserver` deployment will be replaced with your newly edited file.\n* You must restart the xmlserver pod(s) for the new setting to be used. You can restart the pod(s) using the Kubernetes `delete pod` command.  For example:\n  `k delete pod <xmlserver-pod-name>`\n  This will terminate the running pod and start a new pod that reflects the new ConfigMap.\n\n### Modifying the log4j properties\n\nThe out-of-the-box `log4j2.properties` file will write the XML server trace output to stdout, which is routed to the pod's `tmp/xmlserver.log` file.\nOptionally, you can provide your own custom log4j properties file.\nFor instance, it can be useful to modify the output layout to indicate the time-of-day and the worker thread processing the XML server job.\nFor example this log4j pattern:\n\n```\nappender.A1.layout.pattern=[%p] %d{ABSOLUTE_MICROS} [%t] [%c{1}] %m%n\n```\n\nwill produce output in this format:\n\n```\n[xmlserver] [INFO] 14:01:46,165000 [ThreadPoolWorker-1] [XMLConnectionHandler] - Awaiting job configuration.\n```\n\nas compared to the out-of-the-box format:\n\n```\n[xmlserver] [INFO] [XMLConnectionHandler] Awaiting job configuration.\n```\n\nFor more information on specifying log4j patterns see the [Layouts section](https://logging.apache.org/log4j/2.x/manual/layouts.html) of the [log4j documentation](https://logging.apache.org/log4j/2.x/manual/index.html).\n\nTo modify the `log4j2.properties` file:\n\n* Copy the `xmlserver` pod's `log4j2.properties` file to your local file system using the Kubernetes copy command.  For example:\n  `k cp <xmlserver-pod-name>:/opt/ibm/Curam/xmlserver/log4j2.properties log4j2.properties -c xmlserver`\n* Edit the local file to specify the desired log4j configuration settings.\n* Create a ConfigMap using your edited copy of `log4j2.properties`; for example:\n  `k create configmap xmlserver-log4j-props-cm --from-file=log4j2.properties`\n* Edit the xmlserver deployment to specify the new ConfigMap:\n  `k edit deployment releasename-xmlserver`\n  * In the subsequent edit session add the entries for the new ConfigMap, matching the name used when creating it; for example:\n\n```\n...\n        volumeMounts:\n        ...\n        - mountPath: /opt/ibm/Curam/xmlserver/log4j2.properties\n          name: xmlserver-log4j-props-cm\n          subPath: log4j2.properties\n...\n      volumes:\n      ...\n      - configMap:\n          defaultMode: 420\n          name: xmlserver-log4j-props-cm\n        name: xmlserver-log4j-props-cm\n```\t\t\n\n* You must restart the xmlserver pod(s) for it to reflect the new trace setting. You can restart the pod by using the Kubernetes `delete pod` command.  For example:\n  `k delete pod <xmlserver-pod-name>`\n  This will terminate the running pod and start a new pod that reflects the new ConfigMap that contains the log4j properties.\n","fileAbsolutePath":"/home/runner/work/spm-kubernetes/spm-kubernetes/src/pages/troubleshooting/xmlserver-trace.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","56986546","768070550"]}