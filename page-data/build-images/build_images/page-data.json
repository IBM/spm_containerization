{"componentChunkName":"component---src-pages-build-images-build-images-mdx","path":"/build-images/build_images/","result":{"pageContext":{"frontmatter":{"title":"Building the Docker® images","description":"Building the Docker images"},"relativePagePath":"/build-images/build_images.mdx","titleType":"page","MdxNode":{"id":"9769bd2b-e99b-5ef3-b53f-4ea483ec1e5c","children":[],"parent":"c3c33612-2b87-5f33-a9ab-7698bef88606","internal":{"content":"---\ntitle: Building the Docker® images\ndescription: Building the Docker images\n---\n\n## Introduction\n\n<InlineNotification>\nUniversal Base Image (UBI) consists of enterprise-ready and OCI-compliant Linux containers that offer greater security with stricter defaults than general images.\n\nFor more information, see Red Hat's [Universal Base Image](https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image) and [Red Hat Universal base image how it works](https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/)\n\n</InlineNotification>\n\nSome of the base images require [authentication](https://access.redhat.com/terms-based-registry) with the RedHat Container Registry.\nYou must be logged in to the following registries:\n\n* `registry.redhat.io`\n  * For accessing `registry.redhat.io/rhel8/httpd-24`\n  * Login using `docker login registry.redhat.io`\n* `registry.connect.redhat.com`\n  * For accessing `registry.connect.redhat.com/ibm/ibmjava8-sdk-ubi8-minimal`\n  * Login using `docker login registry.connect.redhat.com`\n\n<InlineNotification>\n\n**Note:** As covered in [building Base images](/build-images/base_images), if you do not have an active RedHat subscription you will need to build your own base images from\nsource following the steps there.\n\nShould you opt to build your own base images, the `BASE_REGISTRY` argument in the following commands may be omitted, if the base images are built in the same environment.\n\nIf the images are stored in a private registry, set `BASE_REGISTRY` to the registry's hostname.\n\n</InlineNotification>\n\nFor the `docker` commands that follow you must set a `DOCKER_REGISTRY` environment variable based on the container environment you are deploying:\n\n<Tabs>\n\n<Tab label=\"CRC\">\n<Row>\n<Column>\n\nThe URL for this value can be retrieved using this command: `oc registry info --public`\n\nFor example:\n\n```shell\nexport DOCKER_REGISTRY=default-route-openshift-image-registry.apps-crc.testing\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Minikube Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nexport DOCKER_REGISTRY=minikube.local:5000\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Minikube Windows PS\">\n<Row>\n<Column>\n\n<InlineNotification>\n\n**IMPORTANT:** For Minikube on Windows set `DOCKER_REGISTRY` to the value: `localhost:5000`.\nSee the [Minikube Handbook](https://minikube.sigs.k8s.io/docs/handbook/registry/#docker-on-windows) for more information.\n\n</InlineNotification>\n\n```powershell\n`$env:DOCKER_REGISTRY = \"localhost:5000\"`\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"AKS\">\n<Row>\n<Column>\n\n```shell\nexport DOCKER_REGISTRY=us.icr.io\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nNow that all the elements are in place, build the images as follows:\n\n## Building the images\n\nThe following sections provide steps for building the Docker images.\n\nSet the `PROJECT` environment variable:\n\n<InlineNotification>\n\n**Note:** In the following commands, the value of `$PROJECT` will change depending on deployment type:\n\n* For a Minikube deployment the value of `$PROJECT` is arbitrary.\n* For an AKS deployment the value of `$PROJECT` must equate to a valid namespace in the customer’s account.\n* For an OpenShift deployment the value of `$PROJECT` must equate to a valid project.\nFor this runbook it is best to stick with the value chosen for `$PROJECT` in [Creating a CRC project](/prereq/openshift/codeready-containers#creating-a-crc-project)\n\n</InlineNotification>\n\n### XML server image\n\nTo build the XML server image, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/xmlserver:latest \\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\n     --file XMLServer.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/xmlserver:latest \\\n     --file XMLServer.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Using RedHat Registry (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/xmlserver:latest `\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" `\n     --file XMLServer.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\Liberty\\\ndocker build --tag $env:DOCKER_REGISTRY/$env:PROJECT/xmlserver:latest `\n     --file XMLServer.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n![SPM 8.0.1.0](https://img.shields.io/badge/-SPM_8.0.1.0-green) For information on building an XML server sidecar performance monitoring image see [Monitoring XML servers](/monitoring/xmlserver-monitoring).\n\n### Utilities image\n\nThe utilities image is used at various stages of the deployment to check the state of the deployment.\n\nTo build the utilities image, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/utilities:latest \\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\n     --file Utilities.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/utilities:latest \\\n     --file Utilities.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Using RedHat Registry (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\Liberty\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/utilities:latest `\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" `\n     --file Utilities.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\Liberty\\\ndocker build --tag $env:DOCKER_REGISTRY/$env:PROJECT/utilities:latest `\n       --file Utilities.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n### Batch image\n\nA `.dockerignore` file is used to omit the EAR files from the build context for batch.\n\nTo build the batch image, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/ear' > .dockerignore\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/batch:latest \\\n     --file Batch.Dockerfile .\nrm -f .dockerignore\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\Liberty\\\necho \"content/release-stage/ear\" | set-content .dockerignore -Encoding Ascii\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/batch:latest `\n     --file Batch.Dockerfile .\ndel  .dockerignore\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n### Server Code image\n\nTo build the Server Code image, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/servercode:latest \\\n     --file ServerEAR.Dockerfile \\\n     --build-arg \"MQ_RA_LICENSE=--acceptLicense\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\Liberty\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/servercode:latest `\n     --file ServerEAR.Dockerfile `\n     --build-arg \"MQ_RA_LICENSE=--acceptLicense\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n### Application images\n\nTake note of the `SERVERCODE_IMAGE` build argument which references the server code image - this gives the images a common base.\n\nTo build the application images, run the following commands for each of the applications (EAR files) needed:\n\n<Tabs>\n\n<Tab label=\"Curam EAR (Mac/Linux)\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/curam:latest \\\n     --file ClientEAR.Dockerfile \\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/$PROJECT/servercode:latest\" \\\n     --build-arg \"EAR_NAME=Curam\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Curam EAR (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\Liberty\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/curam:latest `\n     --file ClientEAR.Dockerfile \\\n     --build-arg \"SERVERCODE_IMAGE=$env:DOCKER_REGISTRY/$env:PROJECT/servercode:latest\" \\\n     --build-arg \"EAR_NAME=Curam\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Other EARs (Mac/Linux)\">\n<Row>\n<Column>\n\nFor additional SPM applications (e.g. Rest, CitizenPortal), make the following changes to the command:\n\n* the value of the `--tag` argument must be the application name in _lowercase_\n* the value of the `--build-arg EAR_NAME` argument must be the name of the EAR file _without_ the file extension (that is, for `Rest.ear`, use the value `Rest`)\n\n```shell\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/rest:latest \\\n     --file ClientEAR.Dockerfile \\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/$PROJECT/servercode:latest\" \\\n     --build-arg \"EAR_NAME=Rest\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Other EARs (Windows PS)\">\n<Row>\n<Column>\n\nFor additional SPM applications (e.g. Rest, CitizenPortal), make the following changes to the command:\n\n* the value of the `--tag` argument must be the application name in _lowercase_\n* the value of the `--build-arg EAR_NAME` argument must be the name of the EAR file _without_ the file extension (that is, for `Rest.ear`, use the value `Rest`)\n\n```powershell\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/rest:latest `\n     --file ClientEAR.Dockerfile `\n     --build-arg \"SERVERCODE_IMAGE=$env:DOCKER_REGISTRY/$env:PROJECT/servercode:latest\" `\n     --build-arg \"EAR_NAME=Rest\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n### Static Content image\n\nTo build the static content image, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/httpd:latest \\\n     --file StaticContent.Dockerfile \\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/httpd:latest \\\n     --file StaticContent.Dockerfile \\\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Using RedHat Registry (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\HTTPServer\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/httpd:latest `\n     --file StaticContent.Dockerfile `\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" `\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\HTTPServer\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/httpd:latest `\n     --file StaticContent.Dockerfile `\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n<InlineNotification>\n\n**Note:** The `CONTENT_DIR` build argument must correspond to the value set in `curam-config.xml` when the webclient was built.\n\n</InlineNotification>\n\n### Universal Access image\n\nTo build an SPM Docker image for your _built_ Universal Access application:\n\n* Copy the `build` directory from the React application to `$SPM_HOME/dockerfiles/HTTPServer`\n* Run the following commands:\n\n<InlineNotification>\n\nThis is applicable only if you are licensed for SPM Universal Access.\n\n**Note:** The `CONTENT_DIR` build argument must correspond to the value of the `PUBLIC_URL` variable set when creating the production build of the React app (`npm run build`).\n\n</InlineNotification>\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/uawebapp:latest \\\n     --file UAWebApp.Dockerfile \\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\n     --build-arg \"CONTENT_DIR=/universal\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/uawebapp:latest \\\n     --file UAWebApp.Dockerfile \\\n     --build-arg \"CONTENT_DIR=/universal\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Using RedHat Registry (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\HTTPServer\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/uawebapp:latest `\n     --file UAWebApp.Dockerfile `\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" `\n     --build-arg \"CONTENT_DIR=/universal\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\HTTPServer\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/uawebapp:latest `\n     --file UAWebApp.Dockerfile `\n     --build-arg \"CONTENT_DIR=/universal\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n## Pushing the images to the registry\n\nWhen you set up Minikube by following the steps in [Minikube](/prereq/kubernetes/minikube), a registry was also created to store the Docker images.\nTo push the new images that you created to the registry, run the following commands:\n\n```shell\ndocker push $DOCKER_REGISTRY/$PROJECT/xmlserver:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/utilities:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/batch:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/servercode:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/curam:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/httpd:latest\n```\n\n<InlineNotification>\n\nIf any additional images were built (for other SPM applications or for the React application), do not forget to push the images too. For example:\n\n```shell\ndocker push $DOCKER_REGISTRY/$PROJECT/rest:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/uawebapp:latest\n```\n\n</InlineNotification>\n\n## Pushing the images to the a Container Registry\n\nA Container Registry is the service to distribute the containers across a Kubernetes service In order to configure it, some preparation steps are\nrequired to obtain the credentials and a namespace, globally unique between all the tenants of your cloud of choice.\nRefer to [Getting Started with Artifactory as a Docker Registry](https://jfrog.com/help/r/jfrog-artifactory-documentation/getting-started-with-artifactory-as-a-docker-registry) for more information on configuring the registry and obtaining the required credentials.\n\n```shell\ndocker login ${server-name}.jfrog.io\n\n\ndocker push ${server-name}.jfrog.io/{repo-name}/xmlserver:latest\ndocker push ${server-name}.jfrog.io/{repo-name}/utilities:latest\ndocker push ${server-name}.jfrog.io/{repo-name}/batch:latest\ndocker push ${server-name}.jfrog.io/{repo-name}/curam:latest\ndocker push ${server-name}.jfrog.io/{repo-name}/httpd:latest\n```\n\n## View the artifacts in the repository\n\nConfirm that the pushes to the Docker registry succeeded. Run the following command:\n\n<Tabs>\n\n<Tab label=\"Minikube\">\n<Row>\n<Column>\n\n```shell\ncurl http://$DOCKER_REGISTRY/v2/_catalog\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"CRC\">\n<Row>\n<Column>\n\n```shell\ncurl -k -ukubeadmin:$(oc whoami -t) https://$(oc registry info --public)/v2/_catalog\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nThe command returns the following result, depending on the images built and your tagging:\n\n```json\n{\"repositories\":[\"batch\",\"curam\",\"xmlserver\",\"httpd\",\"utilities\", \"servercode\"]}\n```\n\n<InlineNotification>\n\n**Note:** Due to an issue with [Minikube](https://github.com/kubernetes/minikube/issues/2365) you will need to repush the Docker images to the registry\neach time you shut down.\n\n</InlineNotification>\n\nFor more information about the Docker Registry HTTP API, see [Docker Registry HTTP API V2](https://docs.docker.com/registry/spec/api/).\n","type":"Mdx","contentDigest":"de0a2784cb28bae8d1ad23ed01d02191","owner":"gatsby-plugin-mdx","counter":164},"frontmatter":{"title":"Building the Docker® images","description":"Building the Docker images"},"exports":{},"rawBody":"---\ntitle: Building the Docker® images\ndescription: Building the Docker images\n---\n\n## Introduction\n\n<InlineNotification>\nUniversal Base Image (UBI) consists of enterprise-ready and OCI-compliant Linux containers that offer greater security with stricter defaults than general images.\n\nFor more information, see Red Hat's [Universal Base Image](https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image) and [Red Hat Universal base image how it works](https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/)\n\n</InlineNotification>\n\nSome of the base images require [authentication](https://access.redhat.com/terms-based-registry) with the RedHat Container Registry.\nYou must be logged in to the following registries:\n\n* `registry.redhat.io`\n  * For accessing `registry.redhat.io/rhel8/httpd-24`\n  * Login using `docker login registry.redhat.io`\n* `registry.connect.redhat.com`\n  * For accessing `registry.connect.redhat.com/ibm/ibmjava8-sdk-ubi8-minimal`\n  * Login using `docker login registry.connect.redhat.com`\n\n<InlineNotification>\n\n**Note:** As covered in [building Base images](/build-images/base_images), if you do not have an active RedHat subscription you will need to build your own base images from\nsource following the steps there.\n\nShould you opt to build your own base images, the `BASE_REGISTRY` argument in the following commands may be omitted, if the base images are built in the same environment.\n\nIf the images are stored in a private registry, set `BASE_REGISTRY` to the registry's hostname.\n\n</InlineNotification>\n\nFor the `docker` commands that follow you must set a `DOCKER_REGISTRY` environment variable based on the container environment you are deploying:\n\n<Tabs>\n\n<Tab label=\"CRC\">\n<Row>\n<Column>\n\nThe URL for this value can be retrieved using this command: `oc registry info --public`\n\nFor example:\n\n```shell\nexport DOCKER_REGISTRY=default-route-openshift-image-registry.apps-crc.testing\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Minikube Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nexport DOCKER_REGISTRY=minikube.local:5000\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Minikube Windows PS\">\n<Row>\n<Column>\n\n<InlineNotification>\n\n**IMPORTANT:** For Minikube on Windows set `DOCKER_REGISTRY` to the value: `localhost:5000`.\nSee the [Minikube Handbook](https://minikube.sigs.k8s.io/docs/handbook/registry/#docker-on-windows) for more information.\n\n</InlineNotification>\n\n```powershell\n`$env:DOCKER_REGISTRY = \"localhost:5000\"`\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"AKS\">\n<Row>\n<Column>\n\n```shell\nexport DOCKER_REGISTRY=us.icr.io\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nNow that all the elements are in place, build the images as follows:\n\n## Building the images\n\nThe following sections provide steps for building the Docker images.\n\nSet the `PROJECT` environment variable:\n\n<InlineNotification>\n\n**Note:** In the following commands, the value of `$PROJECT` will change depending on deployment type:\n\n* For a Minikube deployment the value of `$PROJECT` is arbitrary.\n* For an AKS deployment the value of `$PROJECT` must equate to a valid namespace in the customer’s account.\n* For an OpenShift deployment the value of `$PROJECT` must equate to a valid project.\nFor this runbook it is best to stick with the value chosen for `$PROJECT` in [Creating a CRC project](/prereq/openshift/codeready-containers#creating-a-crc-project)\n\n</InlineNotification>\n\n### XML server image\n\nTo build the XML server image, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/xmlserver:latest \\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\n     --file XMLServer.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/xmlserver:latest \\\n     --file XMLServer.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Using RedHat Registry (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/xmlserver:latest `\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" `\n     --file XMLServer.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\Liberty\\\ndocker build --tag $env:DOCKER_REGISTRY/$env:PROJECT/xmlserver:latest `\n     --file XMLServer.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n![SPM 8.0.1.0](https://img.shields.io/badge/-SPM_8.0.1.0-green) For information on building an XML server sidecar performance monitoring image see [Monitoring XML servers](/monitoring/xmlserver-monitoring).\n\n### Utilities image\n\nThe utilities image is used at various stages of the deployment to check the state of the deployment.\n\nTo build the utilities image, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/utilities:latest \\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\n     --file Utilities.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/utilities:latest \\\n     --file Utilities.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Using RedHat Registry (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\Liberty\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/utilities:latest `\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" `\n     --file Utilities.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\Liberty\\\ndocker build --tag $env:DOCKER_REGISTRY/$env:PROJECT/utilities:latest `\n       --file Utilities.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n### Batch image\n\nA `.dockerignore` file is used to omit the EAR files from the build context for batch.\n\nTo build the batch image, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/ear' > .dockerignore\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/batch:latest \\\n     --file Batch.Dockerfile .\nrm -f .dockerignore\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\Liberty\\\necho \"content/release-stage/ear\" | set-content .dockerignore -Encoding Ascii\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/batch:latest `\n     --file Batch.Dockerfile .\ndel  .dockerignore\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n### Server Code image\n\nTo build the Server Code image, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/servercode:latest \\\n     --file ServerEAR.Dockerfile \\\n     --build-arg \"MQ_RA_LICENSE=--acceptLicense\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\Liberty\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/servercode:latest `\n     --file ServerEAR.Dockerfile `\n     --build-arg \"MQ_RA_LICENSE=--acceptLicense\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n### Application images\n\nTake note of the `SERVERCODE_IMAGE` build argument which references the server code image - this gives the images a common base.\n\nTo build the application images, run the following commands for each of the applications (EAR files) needed:\n\n<Tabs>\n\n<Tab label=\"Curam EAR (Mac/Linux)\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/curam:latest \\\n     --file ClientEAR.Dockerfile \\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/$PROJECT/servercode:latest\" \\\n     --build-arg \"EAR_NAME=Curam\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Curam EAR (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\Liberty\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/curam:latest `\n     --file ClientEAR.Dockerfile \\\n     --build-arg \"SERVERCODE_IMAGE=$env:DOCKER_REGISTRY/$env:PROJECT/servercode:latest\" \\\n     --build-arg \"EAR_NAME=Curam\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Other EARs (Mac/Linux)\">\n<Row>\n<Column>\n\nFor additional SPM applications (e.g. Rest, CitizenPortal), make the following changes to the command:\n\n* the value of the `--tag` argument must be the application name in _lowercase_\n* the value of the `--build-arg EAR_NAME` argument must be the name of the EAR file _without_ the file extension (that is, for `Rest.ear`, use the value `Rest`)\n\n```shell\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/rest:latest \\\n     --file ClientEAR.Dockerfile \\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/$PROJECT/servercode:latest\" \\\n     --build-arg \"EAR_NAME=Rest\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Other EARs (Windows PS)\">\n<Row>\n<Column>\n\nFor additional SPM applications (e.g. Rest, CitizenPortal), make the following changes to the command:\n\n* the value of the `--tag` argument must be the application name in _lowercase_\n* the value of the `--build-arg EAR_NAME` argument must be the name of the EAR file _without_ the file extension (that is, for `Rest.ear`, use the value `Rest`)\n\n```powershell\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/rest:latest `\n     --file ClientEAR.Dockerfile `\n     --build-arg \"SERVERCODE_IMAGE=$env:DOCKER_REGISTRY/$env:PROJECT/servercode:latest\" `\n     --build-arg \"EAR_NAME=Rest\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n### Static Content image\n\nTo build the static content image, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/httpd:latest \\\n     --file StaticContent.Dockerfile \\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/httpd:latest \\\n     --file StaticContent.Dockerfile \\\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Using RedHat Registry (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\HTTPServer\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/httpd:latest `\n     --file StaticContent.Dockerfile `\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" `\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\HTTPServer\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/httpd:latest `\n     --file StaticContent.Dockerfile `\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n<InlineNotification>\n\n**Note:** The `CONTENT_DIR` build argument must correspond to the value set in `curam-config.xml` when the webclient was built.\n\n</InlineNotification>\n\n### Universal Access image\n\nTo build an SPM Docker image for your _built_ Universal Access application:\n\n* Copy the `build` directory from the React application to `$SPM_HOME/dockerfiles/HTTPServer`\n* Run the following commands:\n\n<InlineNotification>\n\nThis is applicable only if you are licensed for SPM Universal Access.\n\n**Note:** The `CONTENT_DIR` build argument must correspond to the value of the `PUBLIC_URL` variable set when creating the production build of the React app (`npm run build`).\n\n</InlineNotification>\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/uawebapp:latest \\\n     --file UAWebApp.Dockerfile \\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\n     --build-arg \"CONTENT_DIR=/universal\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/uawebapp:latest \\\n     --file UAWebApp.Dockerfile \\\n     --build-arg \"CONTENT_DIR=/universal\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Using RedHat Registry (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\HTTPServer\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/uawebapp:latest `\n     --file UAWebApp.Dockerfile `\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" `\n     --build-arg \"CONTENT_DIR=/universal\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image (Windows PS)\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\HTTPServer\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/uawebapp:latest `\n     --file UAWebApp.Dockerfile `\n     --build-arg \"CONTENT_DIR=/universal\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n## Pushing the images to the registry\n\nWhen you set up Minikube by following the steps in [Minikube](/prereq/kubernetes/minikube), a registry was also created to store the Docker images.\nTo push the new images that you created to the registry, run the following commands:\n\n```shell\ndocker push $DOCKER_REGISTRY/$PROJECT/xmlserver:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/utilities:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/batch:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/servercode:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/curam:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/httpd:latest\n```\n\n<InlineNotification>\n\nIf any additional images were built (for other SPM applications or for the React application), do not forget to push the images too. For example:\n\n```shell\ndocker push $DOCKER_REGISTRY/$PROJECT/rest:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/uawebapp:latest\n```\n\n</InlineNotification>\n\n## Pushing the images to the a Container Registry\n\nA Container Registry is the service to distribute the containers across a Kubernetes service In order to configure it, some preparation steps are\nrequired to obtain the credentials and a namespace, globally unique between all the tenants of your cloud of choice.\nRefer to [Getting Started with Artifactory as a Docker Registry](https://jfrog.com/help/r/jfrog-artifactory-documentation/getting-started-with-artifactory-as-a-docker-registry) for more information on configuring the registry and obtaining the required credentials.\n\n```shell\ndocker login ${server-name}.jfrog.io\n\n\ndocker push ${server-name}.jfrog.io/{repo-name}/xmlserver:latest\ndocker push ${server-name}.jfrog.io/{repo-name}/utilities:latest\ndocker push ${server-name}.jfrog.io/{repo-name}/batch:latest\ndocker push ${server-name}.jfrog.io/{repo-name}/curam:latest\ndocker push ${server-name}.jfrog.io/{repo-name}/httpd:latest\n```\n\n## View the artifacts in the repository\n\nConfirm that the pushes to the Docker registry succeeded. Run the following command:\n\n<Tabs>\n\n<Tab label=\"Minikube\">\n<Row>\n<Column>\n\n```shell\ncurl http://$DOCKER_REGISTRY/v2/_catalog\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"CRC\">\n<Row>\n<Column>\n\n```shell\ncurl -k -ukubeadmin:$(oc whoami -t) https://$(oc registry info --public)/v2/_catalog\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nThe command returns the following result, depending on the images built and your tagging:\n\n```json\n{\"repositories\":[\"batch\",\"curam\",\"xmlserver\",\"httpd\",\"utilities\", \"servercode\"]}\n```\n\n<InlineNotification>\n\n**Note:** Due to an issue with [Minikube](https://github.com/kubernetes/minikube/issues/2365) you will need to repush the Docker images to the registry\neach time you shut down.\n\n</InlineNotification>\n\nFor more information about the Docker Registry HTTP API, see [Docker Registry HTTP API V2](https://docs.docker.com/registry/spec/api/).\n","fileAbsolutePath":"/home/runner/work/spm-kubernetes/spm-kubernetes/src/pages/build-images/build_images.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","56986546","768070550"]}