{"version":3,"file":"component---src-pages-build-images-build-images-mdx-9d89ec00778cf5709858.js","mappings":"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","sources":["webpack://spm-kubernetes/./src/pages/build-images/build_images.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/spm-kubernetes/spm-kubernetes/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst Tabs = makeShortcode(\"Tabs\");\nconst Tab = makeShortcode(\"Tab\");\nconst Row = makeShortcode(\"Row\");\nconst Column = makeShortcode(\"Column\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Introduction`}</h2>\n    <InlineNotification mdxType=\"InlineNotification\">\nUniversal Base Image (UBI) consists of enterprise-ready and OCI-compliant Linux containers that offer greater security with stricter defaults than general images.\n      <p>{`For more information, see Red Hat’s `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image\"\n        }}>{`Universal Base Image`}</a>{` and `}<a parentName=\"p\" {...{\n          \"href\": \"https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/\"\n        }}>{`Red Hat Universal base image how it works`}</a></p>\n    </InlineNotification>\n    <p>{`Some of the base images require `}<a parentName=\"p\" {...{\n        \"href\": \"https://access.redhat.com/terms-based-registry\"\n      }}>{`authentication`}</a>{` with the RedHat Container Registry.\nYou must be logged in to the following registries:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`registry.redhat.io`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`For accessing `}<inlineCode parentName=\"li\">{`registry.redhat.io/rhel8/httpd-24`}</inlineCode></li>\n          <li parentName=\"ul\">{`Login using `}<inlineCode parentName=\"li\">{`docker login registry.redhat.io`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`registry.connect.redhat.com`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`For accessing `}<inlineCode parentName=\"li\">{`registry.connect.redhat.com/ibm/ibmjava8-sdk-ubi8-minimal`}</inlineCode></li>\n          <li parentName=\"ul\">{`Login using `}<inlineCode parentName=\"li\">{`docker login registry.connect.redhat.com`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` As covered in `}<a parentName=\"p\" {...{\n          \"href\": \"/spm-kubernetes/build-images/base_images\"\n        }}>{`building Base images`}</a>{`, if you do not have an active RedHat subscription you will need to build your own base images from\nsource following the steps there.`}</p>\n      <p>{`Should you opt to build your own base images, the `}<inlineCode parentName=\"p\">{`BASE_REGISTRY`}</inlineCode>{` argument in the following commands may be omitted, if the base images are built in the same environment.`}</p>\n      <p>{`If the images are stored in a private registry, set `}<inlineCode parentName=\"p\">{`BASE_REGISTRY`}</inlineCode>{` to the registry’s hostname.`}</p>\n    </InlineNotification>\n    <p>{`For the `}<inlineCode parentName=\"p\">{`docker`}</inlineCode>{` commands that follow you must set a `}<inlineCode parentName=\"p\">{`DOCKER_REGISTRY`}</inlineCode>{` environment variable based on the container environment you are deploying:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"CRC\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <p>{`The URL for this value can be retrieved using this command: `}<inlineCode parentName=\"p\">{`oc registry info --public`}</inlineCode></p>\n            <p>{`For example:`}</p>\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`export DOCKER_REGISTRY=default-route-openshift-image-registry.apps-crc.testing\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Minikube Mac/Linux\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`export DOCKER_REGISTRY=minikube.local:5000\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Minikube Windows PS\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <InlineNotification mdxType=\"InlineNotification\">\n              <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` For Minikube on Windows set `}<inlineCode parentName=\"p\">{`DOCKER_REGISTRY`}</inlineCode>{` to the value: `}<inlineCode parentName=\"p\">{`localhost:5000`}</inlineCode>{`.\nSee the `}<a parentName=\"p\" {...{\n                  \"href\": \"https://minikube.sigs.k8s.io/docs/handbook/registry/#docker-on-windows\"\n                }}>{`Minikube Handbook`}</a>{` for more information.`}</p>\n            </InlineNotification>\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`\\`$env:DOCKER_REGISTRY = \"localhost:5000\"\\`\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"AKS\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`export DOCKER_REGISTRY=us.icr.io\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <p>{`Now that all the elements are in place, build the images as follows:`}</p>\n    <h2>{`Building the images`}</h2>\n    <p>{`The following sections provide steps for building the Docker images.`}</p>\n    <p>{`Set the `}<inlineCode parentName=\"p\">{`PROJECT`}</inlineCode>{` environment variable:`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` In the following commands, the value of `}<inlineCode parentName=\"p\">{`$PROJECT`}</inlineCode>{` will change depending on deployment type:`}</p>\n      <ul>\n        <li parentName=\"ul\">{`For a Minikube deployment the value of `}<inlineCode parentName=\"li\">{`$PROJECT`}</inlineCode>{` is arbitrary.`}</li>\n        <li parentName=\"ul\">{`For an AKS deployment the value of `}<inlineCode parentName=\"li\">{`$PROJECT`}</inlineCode>{` must equate to a valid namespace in the customer’s account.`}</li>\n        <li parentName=\"ul\">{`For an OpenShift deployment the value of `}<inlineCode parentName=\"li\">{`$PROJECT`}</inlineCode>{` must equate to a valid project.\nFor this runbook it is best to stick with the value chosen for `}<inlineCode parentName=\"li\">{`$PROJECT`}</inlineCode>{` in `}<a parentName=\"li\" {...{\n            \"href\": \"/spm-kubernetes/prereq/openshift/codeready-containers#creating-a-crc-project\"\n          }}>{`Creating a CRC project`}</a></li>\n      </ul>\n    </InlineNotification>\n    <h3>{`XML server image`}</h3>\n    <p>{`To build the XML server image, run the following commands:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/xmlserver:latest \\\\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\\\n     --file XMLServer.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/xmlserver:latest \\\\\n     --file XMLServer.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Using RedHat Registry (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/xmlserver:latest \\`\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\`\n     --file XMLServer.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\Liberty\\\\\ndocker build --tag $env:DOCKER_REGISTRY/$env:PROJECT/xmlserver:latest \\`\n     --file XMLServer.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://img.shields.io/badge/-SPM_8.0.1.0-green\",\n        \"alt\": \"SPM 8.0.1.0\"\n      }}></img>{` For information on building an XML server sidecar performance monitoring image see `}<a parentName=\"p\" {...{\n        \"href\": \"/spm-kubernetes/monitoring/xmlserver-monitoring\"\n      }}>{`Monitoring XML servers`}</a>{`.`}</p>\n    <h3>{`Utilities image`}</h3>\n    <p>{`The utilities image is used at various stages of the deployment to check the state of the deployment.`}</p>\n    <p>{`To build the utilities image, run the following commands:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/utilities:latest \\\\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\\\n     --file Utilities.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/utilities:latest \\\\\n     --file Utilities.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Using RedHat Registry (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\Liberty\\\\\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/utilities:latest \\`\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\`\n     --file Utilities.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\Liberty\\\\\ndocker build --tag $env:DOCKER_REGISTRY/$env:PROJECT/utilities:latest \\`\n       --file Utilities.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <h3>{`Batch image`}</h3>\n    <p>{`A `}<inlineCode parentName=\"p\">{`.dockerignore`}</inlineCode>{` file is used to omit the EAR files from the build context for batch.`}</p>\n    <p>{`To build the batch image, run the following commands:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Mac/Linux\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/ear' > .dockerignore\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/batch:latest \\\\\n     --file Batch.Dockerfile .\nrm -f .dockerignore\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Windows PS\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\Liberty\\\\\necho \"content/release-stage/ear\" | set-content .dockerignore -Encoding Ascii\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/batch:latest \\`\n     --file Batch.Dockerfile .\ndel  .dockerignore\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <h3>{`Server Code image`}</h3>\n    <p>{`To build the Server Code image, run the following commands:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Mac/Linux\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/servercode:latest \\\\\n     --file ServerEAR.Dockerfile \\\\\n     --build-arg \"MQ_RA_LICENSE=--acceptLicense\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Windows PS\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\Liberty\\\\\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/servercode:latest \\`\n     --file ServerEAR.Dockerfile \\`\n     --build-arg \"MQ_RA_LICENSE=--acceptLicense\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <h3>{`Application images`}</h3>\n    <p>{`Take note of the `}<inlineCode parentName=\"p\">{`SERVERCODE_IMAGE`}</inlineCode>{` build argument which references the server code image - this gives the images a common base.`}</p>\n    <p>{`To build the application images, run the following commands for each of the applications (EAR files) needed:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Curam EAR (Mac/Linux)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/curam:latest \\\\\n     --file ClientEAR.Dockerfile \\\\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/$PROJECT/servercode:latest\" \\\\\n     --build-arg \"EAR_NAME=Curam\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Curam EAR (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\Liberty\\\\\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/curam:latest \\`\n     --file ClientEAR.Dockerfile \\\\\n     --build-arg \"SERVERCODE_IMAGE=$env:DOCKER_REGISTRY/$env:PROJECT/servercode:latest\" \\\\\n     --build-arg \"EAR_NAME=Curam\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Other EARs (Mac/Linux)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <p>{`For additional SPM applications (e.g. Rest, CitizenPortal), make the following changes to the command:`}</p>\n            <ul>\n              <li parentName=\"ul\">{`the value of the `}<inlineCode parentName=\"li\">{`--tag`}</inlineCode>{` argument must be the application name in `}<em parentName=\"li\">{`lowercase`}</em></li>\n              <li parentName=\"ul\">{`the value of the `}<inlineCode parentName=\"li\">{`--build-arg EAR_NAME`}</inlineCode>{` argument must be the name of the EAR file `}<em parentName=\"li\">{`without`}</em>{` the file extension (that is, for `}<inlineCode parentName=\"li\">{`Rest.ear`}</inlineCode>{`, use the value `}<inlineCode parentName=\"li\">{`Rest`}</inlineCode>{`)`}</li>\n            </ul>\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`docker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/rest:latest \\\\\n     --file ClientEAR.Dockerfile \\\\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/$PROJECT/servercode:latest\" \\\\\n     --build-arg \"EAR_NAME=Rest\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Other EARs (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <p>{`For additional SPM applications (e.g. Rest, CitizenPortal), make the following changes to the command:`}</p>\n            <ul>\n              <li parentName=\"ul\">{`the value of the `}<inlineCode parentName=\"li\">{`--tag`}</inlineCode>{` argument must be the application name in `}<em parentName=\"li\">{`lowercase`}</em></li>\n              <li parentName=\"ul\">{`the value of the `}<inlineCode parentName=\"li\">{`--build-arg EAR_NAME`}</inlineCode>{` argument must be the name of the EAR file `}<em parentName=\"li\">{`without`}</em>{` the file extension (that is, for `}<inlineCode parentName=\"li\">{`Rest.ear`}</inlineCode>{`, use the value `}<inlineCode parentName=\"li\">{`Rest`}</inlineCode>{`)`}</li>\n            </ul>\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`docker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/rest:latest \\`\n     --file ClientEAR.Dockerfile \\`\n     --build-arg \"SERVERCODE_IMAGE=$env:DOCKER_REGISTRY/$env:PROJECT/servercode:latest\" \\`\n     --build-arg \"EAR_NAME=Rest\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <h3>{`Static Content image`}</h3>\n    <p>{`To build the static content image, run the following commands:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/httpd:latest \\\\\n     --file StaticContent.Dockerfile \\\\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\\\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/httpd:latest \\\\\n     --file StaticContent.Dockerfile \\\\\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Using RedHat Registry (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\HTTPServer\\\\\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/httpd:latest \\`\n     --file StaticContent.Dockerfile \\`\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\`\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\HTTPServer\\\\\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/httpd:latest \\`\n     --file StaticContent.Dockerfile \\`\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` The `}<inlineCode parentName=\"p\">{`CONTENT_DIR`}</inlineCode>{` build argument must correspond to the value set in `}<inlineCode parentName=\"p\">{`curam-config.xml`}</inlineCode>{` when the webclient was built.`}</p>\n    </InlineNotification>\n    <h3>{`Universal Access image`}</h3>\n    <p>{`To build an SPM Docker image for your `}<em parentName=\"p\">{`built`}</em>{` Universal Access application:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Copy the `}<inlineCode parentName=\"li\">{`build`}</inlineCode>{` directory from the React application to `}<inlineCode parentName=\"li\">{`$SPM_HOME/dockerfiles/HTTPServer`}</inlineCode></li>\n      <li parentName=\"ul\">{`Run the following commands:`}</li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`This is applicable only if you are licensed for SPM Universal Access.`}</p>\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` The `}<inlineCode parentName=\"p\">{`CONTENT_DIR`}</inlineCode>{` build argument must correspond to the value of the `}<inlineCode parentName=\"p\">{`PUBLIC_URL`}</inlineCode>{` variable set when creating the production build of the React app (`}<inlineCode parentName=\"p\">{`npm run build`}</inlineCode>{`).`}</p>\n    </InlineNotification>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/uawebapp:latest \\\\\n     --file UAWebApp.Dockerfile \\\\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\\\n     --build-arg \"CONTENT_DIR=/universal\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/uawebapp:latest \\\\\n     --file UAWebApp.Dockerfile \\\\\n     --build-arg \"CONTENT_DIR=/universal\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Using RedHat Registry (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\HTTPServer\\\\\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/uawebapp:latest \\`\n     --file UAWebApp.Dockerfile \\`\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\`\n     --build-arg \"CONTENT_DIR=/universal\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\HTTPServer\\\\\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/uawebapp:latest \\`\n     --file UAWebApp.Dockerfile \\`\n     --build-arg \"CONTENT_DIR=/universal\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <h2>{`Pushing the images to the registry`}</h2>\n    <p>{`When you set up Minikube by following the steps in `}<a parentName=\"p\" {...{\n        \"href\": \"/spm-kubernetes/prereq/kubernetes/minikube\"\n      }}>{`Minikube`}</a>{`, a registry was also created to store the Docker images.\nTo push the new images that you created to the registry, run the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`docker push $DOCKER_REGISTRY/$PROJECT/xmlserver:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/utilities:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/batch:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/servercode:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/curam:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/httpd:latest\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`If any additional images were built (for other SPM applications or for the React application), do not forget to push the images too. For example:`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-shell\"\n        }}>{`docker push $DOCKER_REGISTRY/$PROJECT/rest:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/uawebapp:latest\n`}</code></pre>\n    </InlineNotification>\n    <h2>{`Pushing the images to the a Container Registry`}</h2>\n    <p>{`A Container Registry is the service to distribute the containers across a Kubernetes service In order to configure it, some preparation steps are\nrequired to obtain the credentials and a namespace, globally unique between all the tenants of your cloud of choice.\nRefer to `}<a parentName=\"p\" {...{\n        \"href\": \"https://jfrog.com/help/r/jfrog-artifactory-documentation/getting-started-with-artifactory-as-a-docker-registry\"\n      }}>{`Getting Started with Artifactory as a Docker Registry`}</a>{` for more information on configuring the registry and obtaining the required credentials.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`docker login \\${server-name}.jfrog.io\n\n\ndocker push \\${server-name}.jfrog.io/{repo-name}/xmlserver:latest\ndocker push \\${server-name}.jfrog.io/{repo-name}/utilities:latest\ndocker push \\${server-name}.jfrog.io/{repo-name}/batch:latest\ndocker push \\${server-name}.jfrog.io/{repo-name}/curam:latest\ndocker push \\${server-name}.jfrog.io/{repo-name}/httpd:latest\n`}</code></pre>\n    <h2>{`View the artifacts in the repository`}</h2>\n    <p>{`Confirm that the pushes to the Docker registry succeeded. Run the following command:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Minikube\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`curl http://$DOCKER_REGISTRY/v2/_catalog\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"CRC\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`curl -k -ukubeadmin:$(oc whoami -t) https://$(oc registry info --public)/v2/_catalog\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <p>{`The command returns the following result, depending on the images built and your tagging:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\"repositories\":[\"batch\",\"curam\",\"xmlserver\",\"httpd\",\"utilities\", \"servercode\"]}\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` Due to an issue with `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/kubernetes/minikube/issues/2365\"\n        }}>{`Minikube`}</a>{` you will need to repush the Docker images to the registry\neach time you shut down.`}</p>\n    </InlineNotification>\n    <p>{`For more information about the Docker Registry HTTP API, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.docker.com/registry/spec/api/\"\n      }}>{`Docker Registry HTTP API V2`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","InlineNotification","Tabs","Tab","Row","Column","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","Object","assign","mdxType","parentName","label","isMDXComponent"],"sourceRoot":""}