"use strict";(self.webpackChunkspm_kubernetes=self.webpackChunkspm_kubernetes||[]).push([[1711],[,function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return o},default:function(){return h}});var r=n(45),a=(n(6540),n(5680)),i=n(4330);const l=["components"],o={},s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",t)},m=s("InlineNotification"),p=s("Tabs"),g=s("Tab"),d=s("Row"),u=s("Column"),c={_frontmatter:o},y=i.A;function h(e){let{components:t}=e,n=(0,r.A)(e,l);return(0,a.yg)(y,Object.assign({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",null,"Introduction"),(0,a.yg)("p",null,"Monitoring of the XML server is available through:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("img",{parentName:"li",src:"https://img.shields.io/badge/-SPM_8.0.1.0-green",alt:"SPM 8.0.1.0"})," The XML server statistics, described in ",(0,a.yg)("a",{parentName:"li",href:"#monitoring-xml-server-statistics"},"Monitoring XML server statistics")),(0,a.yg)("li",{parentName:"ul"},"The JVM that the XML server runs on, described in ",(0,a.yg)("a",{parentName:"li",href:"#monitoring-the-xml-server-jvm"},"Monitoring the XML server JVM")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("img",{parentName:"li",src:"https://img.shields.io/badge/-SPM_8.1.0.0-green",alt:"SPM 8.1.0.0"})," Health checks, described in ",(0,a.yg)("a",{parentName:"li",href:"#xml-server-health-checks"},"XML server health checks"))),(0,a.yg)("h2",null,"Monitoring XML server statistics"),(0,a.yg)("p",null,"SPM XML servers produce statistics for each job processed. For more information about XML server architecture, see ",(0,a.yg)("strong",{parentName:"p"},"XML server architecture")," in the ",(0,a.yg)("em",{parentName:"p"},"Social Program Management XML Infrastructure Guide"),"."),(0,a.yg)(m,{mdxType:"InlineNotification"},(0,a.yg)("p",null,"The Social Program Management PDF documentation is available to download from ",(0,a.yg)("a",{parentName:"p",href:"https://curam-spm-devops.github.io/wh-support-docs/spm/pdf-documentation/"},"Merative Support Docs"),".")),(0,a.yg)("p",null,"Out-of-the-box these statistics are written to text files in the ",(0,a.yg)("inlineCode",{parentName:"p"},"/opt/ibm/Curam/xmlserver/stats/")," folder but are not directly accessible to Prometheus or other monitoring tools."),(0,a.yg)("p",null,(0,a.yg)("img",{parentName:"p",src:"https://img.shields.io/badge/-SPM_8.0.1.0-green",alt:"SPM 8.0.1.0"})," This topic describes a sample implementation to make XML server statistics available to Prometheus.\nThe ability to access XML server statistics in a Kubernetes deployment requires using the XML server ",(0,a.yg)("inlineCode",{parentName:"p"},"-forcestatswrite")," start option."),(0,a.yg)("p",null,"This option is only available in SPM V8.0.1 or higher. For more information about Statistics and starting the XML server, see ",(0,a.yg)("strong",{parentName:"p"},"Statistics")," and ",(0,a.yg)("strong",{parentName:"p"},"Starting the XML server")," in the ",(0,a.yg)("em",{parentName:"p"},"Social Program Management XML Infrastructure Guide"),"."),(0,a.yg)("h3",null,"Sample implementation"),(0,a.yg)("p",null,"The sample implementation is based on a proof-of-concept performed to illustrate the capability.\nArtifacts used for the proof-of-concept are provided as samples in the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/merative/spm-kubernetes"},"GitHub repo"),"."),(0,a.yg)("p",null,"Notable decisions and limitations used in performing the proof-of-concept:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The Prometheus ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/prometheus/client_java"},"client_java")," is used for implementing the Prometheus collector and exporter, hence it is coded in Java."),(0,a.yg)("li",{parentName:"ul"},"A sidecar container is used to run the Prometheus collector and exporter as this allows for:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Avoiding making any Kubernetes or Prometheus-specific code changes to the XML server code base. This is achieved by the use of persistent storage, which is described in more detail ",(0,a.yg)("a",{parentName:"li",href:"#the-role-of-persistent-storage-in-monitoring-xml-server-statistics"},"below")),(0,a.yg)("li",{parentName:"ul"},"Avoiding additional processes in the xmlserver pod, which could impact on the main xmlserver process.")))),(0,a.yg)("p",null,"At a high-level, providing XML server statistics to Prometheus involves the following steps:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Implementing a Prometheus collector and exporter to make the  ",(0,a.yg)("inlineCode",{parentName:"li"},"/opt/ibm/Curam/xmlserver/stats/ThreadPoolWorker-*")," file contents available to Prometheus"),(0,a.yg)("li",{parentName:"ul"},"Creating a Docker image for the sidecar container that contains the Prometheus collector and exporter"),(0,a.yg)("li",{parentName:"ul"},"Defining a sidecar container in the ",(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver")," deployment"),(0,a.yg)("li",{parentName:"ul"},"Defining the necessary Prometheus configuration for the Kubernetes cluster. The sample deployment provided utilizes the OpenShift PodMonitor.")),(0,a.yg)("h4",null,"The role of persistent storage in monitoring XML server statistics"),(0,a.yg)("p",null,"Persistent storage is required by this sample implementation so that:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver-metrics")," sidecar container has access to the same persistent file system as the ",(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver")," container."),(0,a.yg)("li",{parentName:"ul"},"As the XML server writes statistics to the files in its ",(0,a.yg)("inlineCode",{parentName:"li"},"./stats")," folder those same statistics records are available to the ",(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver-metrics")," sidecar."),(0,a.yg)("li",{parentName:"ul"},"No changes are required to the XML server code base or the ",(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver")," container.")),(0,a.yg)("p",null,"The following describes the files involved in the use of persistent storage and how they interact:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"For the ",(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver-metrics")," container ",(0,a.yg)("inlineCode",{parentName:"li"},"dockerfiles/Liberty/xmlserver-metrics/XMLServer-metrics.Dockerfile")," creates the ",(0,a.yg)("inlineCode",{parentName:"li"},"/opt/ibm/Curam/xmlserver/")," folder and the ",(0,a.yg)("inlineCode",{parentName:"li"},"./tmp")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"./stats")," subfolders in its local file system."),(0,a.yg)("li",{parentName:"ul"},"In ",(0,a.yg)("inlineCode",{parentName:"li"},"helm-charts/xmlserver/templates/deployment.yaml")," the ",(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver-metrics")," container defines the same ",(0,a.yg)("inlineCode",{parentName:"li"},"volumeMounts:")," as the ",(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver")," container and they both reference the deployment’s ",(0,a.yg)("inlineCode",{parentName:"li"},"persistentVolumeClaim:"),"."),(0,a.yg)("li",{parentName:"ul"},"In the ",(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver-metrics")," container the ",(0,a.yg)("inlineCode",{parentName:"li"},"start-prometheus_collector_exporter.sh")," startup shell script ensures the persistent mountpoint is available\nand creates symbolic links from the container’s file system to the persistent file system.")),(0,a.yg)("p",null,"More details on the above files can be found in the relevant sections that follow."),(0,a.yg)("h3",null,"Prometheus collector and exporter"),(0,a.yg)("p",null,"This section describes the Prometheus collector and exporter code provided in the ",(0,a.yg)("inlineCode",{parentName:"p"},"xmlserver_prometheus.jar")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"xmlserver_prometheus-sources.jar")," files that reside in the ",(0,a.yg)("inlineCode",{parentName:"p"},"dockerfiles/Liberty/xmlserver-metrics/")," folder.\nYou may find the following information useful in understanding the sample implementation and how to develop an implementation suitable for your specific environment and use of the XML server."),(0,a.yg)("h4",null,"Choosing XML server statistics"),(0,a.yg)("p",null,"For more information about Statistics and starting the XML server, see ",(0,a.yg)("strong",{parentName:"p"},"Statistics")," in the ",(0,a.yg)("em",{parentName:"p"},"Social Program Management XML Infrastructure Guide"),"."),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Statistic"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Success"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"true"),", ",(0,a.yg)("inlineCode",{parentName:"td"},"false")," (failed)")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Job preview type"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"PDF"),", ",(0,a.yg)("inlineCode",{parentName:"td"},"HTML"),", ",(0,a.yg)("inlineCode",{parentName:"td"},"TEXT"),", ",(0,a.yg)("inlineCode",{parentName:"td"},"RTF"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Elapsed connection"),(0,a.yg)("td",{parentName:"tr",align:null},"elapsed time (milliseconds) from connection start to connection close")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Elapsed job"),(0,a.yg)("td",{parentName:"tr",align:null},"job run time (milliseconds)")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Elapsed job preview send"),(0,a.yg)("td",{parentName:"tr",align:null},"time (milliseconds) to send the preview data to the client")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Job preview data length"),(0,a.yg)("td",{parentName:"tr",align:null},"length of the preview data (in bytes) sent to the client")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Timestamp"),(0,a.yg)("td",{parentName:"tr",align:null},"timestamp (Java timestamp value) when the secure connection entered the system")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Template ID"),(0,a.yg)("td",{parentName:"tr",align:null},"template ID processed")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Template version"),(0,a.yg)("td",{parentName:"tr",align:null},"template version number")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Template locale"),(0,a.yg)("td",{parentName:"tr",align:null},"locale of the template")))),(0,a.yg)("p",null,"For purposes of the proof-of-concept we used these statistics as being illustrative:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Success - reported as success or failure"),(0,a.yg)("li",{parentName:"ul"},"Job type - PDF, HTML, TEXT, and RTF"),(0,a.yg)("li",{parentName:"ul"},"Elapsed connection"),(0,a.yg)("li",{parentName:"ul"},"Job preview data length")),(0,a.yg)("p",null,"Your own requirements, depending on your application usage, etc. may differ."),(0,a.yg)("h4",null,"Coding the Prometheus metric variables"),(0,a.yg)("p",null,"These Prometheus client_java APIs illustrate coding of the above proof-of-concept statistics:"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Jobs run:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'  /** Prometheus counter - of xmlserver jobs. */\n  private static final Counter jobTotals = Counter.build()\n      .namespace("curam_xmlserver")\n      .name("jobs_total")\n      .help("Job counts with labels for status=success|fail ; type=PDF|HTML|TEXT|RTF")\n      .labelNames("status", "type")\n      .register();\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Job elapsed, or connect, time:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'  /** Prometheus histogram - job connect time. */\n  static final Histogram jobConnectTime = Histogram.build()\n      .namespace("curam_xmlserver")\n      .name("job_connect_seconds")\n      .help("Job connect time")\n      .buckets(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9,\n               1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0) \n      .register();\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Job bytes processed:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'  /** Prometheus histogram - job data length. */\n  static final Histogram jobDataLength = Histogram.build()\n      .namespace("curam_xmlserver")\n      .name("job_data_length_bytes")\n      .help("Job preview data length")\n      .buckets(5000, 7000, 9000, 10000, 12000, 14000, 15000, \n               20000, 25000, 30000, 35000, 50000)\n      .register();\n')),(0,a.yg)("h4",null,"Java code for the Prometheus collector and exporter"),(0,a.yg)("p",null,"This is a high-level, pseudo-code description of the Java implementation of the Prometheus collector and exporter:"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"main()")," method:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Process optional arguments",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"-httpPort <port>")," - Port that Prometheus will listen on.  Defaults to: ",(0,a.yg)("inlineCode",{parentName:"li"},"8080")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"-checkInterval <seconds>")," - Number of seconds between checks for data in the ",(0,a.yg)("inlineCode",{parentName:"li"},"./stats/")," folder to check for termination. Defaults to: ",(0,a.yg)("inlineCode",{parentName:"li"},"10")))),(0,a.yg)("li",{parentName:"ul"},"Start the collector thread"),(0,a.yg)("li",{parentName:"ul"},"Start the exporter thread")),(0,a.yg)("p",null,"Collector thread:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Identify all ",(0,a.yg)("inlineCode",{parentName:"li"},"ThreadPoolWorker-*")," files in the ",(0,a.yg)("inlineCode",{parentName:"li"},"./stats")," folder"),(0,a.yg)("li",{parentName:"ul"},"While the thread is not interrupted",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Iterate over each file",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"If there is content",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"If the content has not been previously read",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Create a ",(0,a.yg)("inlineCode",{parentName:"li"},"java.io.RandomAccessFile")," in read mode"),(0,a.yg)("li",{parentName:"ul"},"Bypass previously read content"),(0,a.yg)("li",{parentName:"ul"},"Process each new line in the file",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Call the ",(0,a.yg)("inlineCode",{parentName:"li"},"io.prometheus.client.Counter.inc()")," method to increment status (",(0,a.yg)("inlineCode",{parentName:"li"},"success"),"|",(0,a.yg)("inlineCode",{parentName:"li"},"fail"),") and type (",(0,a.yg)("inlineCode",{parentName:"li"},"PDF"),"|",(0,a.yg)("inlineCode",{parentName:"li"},"HTML"),"|",(0,a.yg)("inlineCode",{parentName:"li"},"TEXT"),"|",(0,a.yg)("inlineCode",{parentName:"li"},"RTF"),")"),(0,a.yg)("li",{parentName:"ul"},"Call the ",(0,a.yg)("inlineCode",{parentName:"li"},"io.prometheus.client.Histogram.observe(double amt)")," method for elapsed time"),(0,a.yg)("li",{parentName:"ul"},"Call the ",(0,a.yg)("inlineCode",{parentName:"li"},"io.prometheus.client.Histogram.observe(double amt)")," method for bytes processed"))),(0,a.yg)("li",{parentName:"ul"},"Record the new number of bytes read from the file"))))),(0,a.yg)("li",{parentName:"ul"},"Sleep for the specified interval")))))),(0,a.yg)("p",null,"Exporter thread:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Using the specified port create a new ",(0,a.yg)("inlineCode",{parentName:"li"},"io.prometheus.client.exporter.HTTPServer.HTTPServer(int port)"))),(0,a.yg)("h3",null,"Creating the Docker image for the sidecar container"),(0,a.yg)("p",null,"In support of building the sidecar Docker image the following files are included in the ",(0,a.yg)("inlineCode",{parentName:"p"},"dockerfiles/Liberty/xmlserver-metrics")," folder of the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/merative/spm-kubernetes"},"GitHub repo"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},".Dockerfile")," that builds the image: ",(0,a.yg)("inlineCode",{parentName:"li"},"XMLServer-metrics.Dockerfile")),(0,a.yg)("li",{parentName:"ul"},"The sample proof-of-concept implementation executable, ",(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver_prometheus.jar"),", and source, ",(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver_prometheus-sources.jar")),(0,a.yg)("li",{parentName:"ul"},"The start shell script, ",(0,a.yg)("inlineCode",{parentName:"li"},"./xmlserver-metrics/start-prometheus_collector_exporter.sh"),", invoked by the ",(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver-metrics")," deployment’s ",(0,a.yg)("inlineCode",{parentName:"li"},"cmd:")," structure and when invoked:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Ensures the persistent storage mount point is available and the expected directories exist."),(0,a.yg)("li",{parentName:"ul"},"Starts the Prometheus collector/exporter Java program in the background."),(0,a.yg)("li",{parentName:"ul"},"Waits for the Java program to terminate and logs the end of the process."))),(0,a.yg)("li",{parentName:"ul"},"The stop shell script, ",(0,a.yg)("inlineCode",{parentName:"li"},"./xmlserver-metrics/stop-prometheus_collector_exporter.sh"),", invoked by the ",(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver-metrics")," deployment’s ",(0,a.yg)("inlineCode",{parentName:"li"},"lifecycle:")," structure and when invoked:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Cleans up the ",(0,a.yg)("inlineCode",{parentName:"li"},".pid")," file created when the Java process was started.")))),(0,a.yg)("h4",null,"Building the Docker image"),(0,a.yg)("p",null,"Building the ",(0,a.yg)("inlineCode",{parentName:"p"},"xmlserver-metrics")," image uses a similar process to building the other Docker images.\nTo build the sidecar image run the following commands:"),(0,a.yg)(m,{mdxType:"InlineNotification"},(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Note:")," In the following commands, the value of ",(0,a.yg)("inlineCode",{parentName:"p"},"$PROJECT")," will change depending on deployment type:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"For a Minikube deployment the value of ",(0,a.yg)("inlineCode",{parentName:"li"},"$PROJECT")," is arbitrary."),(0,a.yg)("li",{parentName:"ul"},"For a Kubernetes deployment the value of ",(0,a.yg)("inlineCode",{parentName:"li"},"$PROJECT")," must equate to a valid namespace in the customer’s account."),(0,a.yg)("li",{parentName:"ul"},"For an OpenShift deployment the value of ",(0,a.yg)("inlineCode",{parentName:"li"},"$PROJECT")," must equate to a valid project.\nFor this runbook it is best to stick with the value chosen for ",(0,a.yg)("inlineCode",{parentName:"li"},"$PROJECT")," in ",(0,a.yg)("a",{parentName:"li",href:"/spm-kubernetes/prereq/openshift/codeready-containers#creating-a-crc-project"},"Creating a CRC project"),"."))),(0,a.yg)(p,{mdxType:"Tabs"},(0,a.yg)(g,{label:"Using RedHat Registry",mdxType:"Tab"},(0,a.yg)(d,{mdxType:"Row"},(0,a.yg)(u,{mdxType:"Column"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},'cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/xmlserver-metrics:latest \\\n     --build-arg "BASE_REGISTRY=registry.connect.redhat.com/" \\\n     --file xmlserver-metrics/XMLServer-metrics.Dockerfile .\n'))))),(0,a.yg)(g,{label:"Unauthenticated / Local image",mdxType:"Tab"},(0,a.yg)(d,{mdxType:"Row"},(0,a.yg)(u,{mdxType:"Column"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/xmlserver-metrics:latest \\\n     --file xmlserver-metrics/XMLServer-metrics.Dockerfile .\n"))))),(0,a.yg)(g,{label:"Using RedHat Registry (Windows PS)",mdxType:"Tab"},(0,a.yg)(d,{mdxType:"Row"},(0,a.yg)(u,{mdxType:"Column"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-powershell"},'cd $env:SPM_HOME\\dockerfiles\\Liberty\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/xmlserver-metrics:latest `\n     --build-arg "BASE_REGISTRY=registry.redhat.io/" `\n     --file xmlserver-metrics\\XMLServer-metrics.Dockerfile .\n'))))),(0,a.yg)(g,{label:"Unauthenticated / Local image (Windows PS)",mdxType:"Tab"},(0,a.yg)(d,{mdxType:"Row"},(0,a.yg)(u,{mdxType:"Column"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-powershell"},"cd $env:SPM_HOME\\dockerfiles\\Liberty\\\ndocker build `\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/xmlserver-metrics:latest `\n     --file xmlserver-metrics\\XMLServer-metrics.Dockerfile .\n")))))),(0,a.yg)("h3",null,"Deploying the sidecar container and configuring for Prometheus"),(0,a.yg)("p",null,"Sample files are provided to define the sidecar and Prometheus configuration and ",(0,a.yg)("inlineCode",{parentName:"p"},"xmlserver-metrics")," is only installed by Helm when these settings are provided:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"global.apps.common.persistence.enabled: true")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"global.useBetaFeatures: true")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver.metrics.enabled: true"))),(0,a.yg)("p",null,"For more information see the ",(0,a.yg)("a",{parentName:"p",href:"/spm-kubernetes/deployment/config-reference#xml-server"},"XML Server Configuration Reference"),"."),(0,a.yg)("p",null,"The following files are included in the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/merative/spm-kubernetes/tree/main/helm-charts/xmlserver"},"helm-charts/xmlserver/"),"\nfolder of the GitHub repo for deploying the ",(0,a.yg)("inlineCode",{parentName:"p"},"xmlserver-metrics")," sidecar container and configuring it for the XML server:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"./templates/deployment.yaml")," - defines the ",(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver-metrics")," sidecar"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"./templates/monitor-xmlserver.yaml")," - defines a ",(0,a.yg)("inlineCode",{parentName:"li"},"PodMonitor"))),(0,a.yg)("p",null,"The Prometheus port, ",(0,a.yg)("inlineCode",{parentName:"p"},"xmlmetrics"),", referenced in both deployment files defaults to ",(0,a.yg)("inlineCode",{parentName:"p"},"8080"),"."),(0,a.yg)("h3",null,"Confirming the status of the xmlserver-metrics container"),(0,a.yg)("p",null,"Once deployed, a Kubernetes ",(0,a.yg)("inlineCode",{parentName:"p"},"get pods")," command will show how many of the containers are ready. For the ",(0,a.yg)("inlineCode",{parentName:"p"},"xmlserver")," deployment it should show ",(0,a.yg)("inlineCode",{parentName:"p"},"2/2")," (two of two) ready."),(0,a.yg)("p",null,"For deployment issues use the Kubernetes ",(0,a.yg)("inlineCode",{parentName:"p"},"describe")," command against the pod to confirm the deployment of the ",(0,a.yg)("inlineCode",{parentName:"p"},"xmlserver-metrics")," container."),(0,a.yg)("p",null,"You can view the ",(0,a.yg)("inlineCode",{parentName:"p"},"xmlserver-metrics")," stdout using the Kubernetes ",(0,a.yg)("inlineCode",{parentName:"p"},"logs")," command and you must use ",(0,a.yg)("inlineCode",{parentName:"p"},"-c xmlserver-metrics")," on the command to specify the container; otherwise, it defaults to the ",(0,a.yg)("inlineCode",{parentName:"p"},"xmlserver")," container.\nWhile the ",(0,a.yg)("inlineCode",{parentName:"p"},"xmlserver-metrics")," container is running log4j output is written to ",(0,a.yg)("inlineCode",{parentName:"p"},"StatsForPrometheus.log")," in the pod’s persistent ",(0,a.yg)("inlineCode",{parentName:"p"},"tmp")," folder: ",(0,a.yg)("inlineCode",{parentName:"p"},"/opt/ibm/Curam/xmlserver/tmp"),"."),(0,a.yg)("h3",null,"Interacting with the XML server statistics"),(0,a.yg)("p",null,"While ultimately you will want to view the XML server statistics in Prometheus or Grafana (not covered here), command line interactions are useful for testing and quickly getting performance indicators."),(0,a.yg)("p",null,"For instance:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Using the ",(0,a.yg)("inlineCode",{parentName:"li"},"curl")," command in a pod’s shell you can get the current metrics (remember that with two containers your Kubernetes ",(0,a.yg)("inlineCode",{parentName:"li"},"exec")," command must use ",(0,a.yg)("inlineCode",{parentName:"li"},"-c xmlserver-metrics")," to enter the correct shell), for example:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"curl -s http://localhost:8080/metrics")," - displays all the Prometheus data and help text"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},'curl -s http://localhost:8080/metrics | grep "curam_xmlserver_jobs_total.status=.success"')," - displays the count of successful XML server jobs"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},'curl -s http://localhost:8080/metrics | grep "curam_xmlserver_jobs_total.status"')," - displays the count of successful and failed jobs")))),(0,a.yg)("h2",null,"Monitoring the XML server JVM"),(0,a.yg)("p",null,"The performance of the Java Virtual Machine (JVM) running the XML server directly impacts the performance of the XML server."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"xmlserver")," image includes the Prometheus JMX Exporter and you can configure your deployment to enable monitoring of the XML server JVM. Your Helm override file needs to specify the following to enable the monitoring:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"global.useBetaFeatures: true")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver.jvmStats.enabled: true"))),(0,a.yg)("p",null,"Additionally you can configure the port and JMX Exporter configuration. This is the default configuration:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver.jvmStats.port: 8083")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"xmlserver.jvmStats.configYaml: ''"))),(0,a.yg)("p",null,"How you configure the JMX Exporter will depend upon how you consume the data.  For reference:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"See the Prometheus JMX Exporter ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/prometheus/jmx_exporter#configuration"},"configuration documentation")),(0,a.yg)("li",{parentName:"ul"},"See this sample ",(0,a.yg)("a",{parentName:"li",href:"https://grafana.com/grafana/dashboards/3066"},"Grafana JVM dashboard"))),(0,a.yg)("h2",null,"XML server health checks"),(0,a.yg)("p",null,(0,a.yg)("img",{parentName:"p",src:"https://img.shields.io/badge/-SPM_8.1.0.0-green",alt:"SPM 8.1.0.0"})," A readiness and liveness probe are available for xmlserver deployments.\nThese probes complement each other to ensure the xmlserver service is not accessed until it is ready and remains available."),(0,a.yg)("p",null,"In support of the probes a folder, ",(0,a.yg)("inlineCode",{parentName:"p"},"xmlserverprobes")," has been added to the ",(0,a.yg)("inlineCode",{parentName:"p"},"/opt/ibm/Curam/xmlserver")," folder in ",(0,a.yg)("inlineCode",{parentName:"p"},"xmlserver")," containers."),(0,a.yg)("p",null,"To enable these probes you need to enable them in your Helm override file.\nDepending on your local environment you may need to adjust the timing values to achieve successful operation.\nSee the ",(0,a.yg)("a",{parentName:"p",href:"/spm-kubernetes/deployment/config-reference#xml-server"},"XML Server Configuration Reference")," topic and the K8s\n",(0,a.yg)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/"},"Configure Liveness, Readiness and Startup Probes")," page for more information."),(0,a.yg)("h3",null,"readinessProbe"),(0,a.yg)("p",null,"The readinessProbe depends on this info level log4j message: ”",(0,a.yg)("inlineCode",{parentName:"p"},"XML Server awaiting connections on port"),"”. Thus, if you have modified the default ",(0,a.yg)("inlineCode",{parentName:"p"},"xmlserver")," log4j configuration to suppress this message you cannot use the readinessProbe."),(0,a.yg)("h3",null,"livenessProbe"),(0,a.yg)("p",null,"The livenessProbe adds messages such as these to the ",(0,a.yg)("inlineCode",{parentName:"p"},"/opt/ibm/Curam/xmlserver/tmp/xmlserver.log")," file for each probe invocation (default 30 seconds):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"[xmlserver] [INFO] [XMLConnectionHandler] Mon Apr 03 12:28:02 BST 2023 Connection received.\n[xmlserver] [INFO] [XMLConnectionHandler] Awaiting job configuration.\n[xmlserver] [INFO] [XMLConnectionHandler] Probe check received.\n")))}h.isMDXComponent=!0}]]);
//# sourceMappingURL=component---src-pages-monitoring-xmlserver-monitoring-mdx-b152e4394de68c9ff78c.js.map